//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EBerzosa.Pundit.CommandLine._Commands {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Strings {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Strings() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("EBerzosa.Pundit.CommandLine._Commands.Strings", typeof(Strings).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to pundit v{0} - http://pundit.codeplex.com.
        /// </summary>
        internal static string Banner {
            get {
                return ResourceManager.GetString("Banner", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///Copyright (c) 2011 Ivan Gavryliuk.
        ///
        ///syntax: {0} &lt;command&gt; [&lt;options&gt;]
        ///
        ///any options are optional and always have default values
        ///to get extended help on a command type &quot;{0} help &lt;command&gt;&quot; i.e &quot;{0} help pack&quot;
        ///
        ///Commands:
        ///  pack - create package based on manifest definition
        ///  publish - publish package to a repository(ies)
        ///  template - create an empty (and invalid) manifest
        ///  resolve - resolve dependencies and refresh project packages specifiend in the manifest
        ///  search - search for packages in rep [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Help {
            get {
                return ResourceManager.GetString("Help", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to syntax: {0} pack [-m:&lt;manifest location&gt;] [-o:&lt;target folder&gt;] [-v:&lt;version override&gt;]
        ///
        ///Creates a package based on the manifest file. Source files required for the package must exist.
        ///  &lt;manifest location&gt; is a name or path to manifest file; by default manifest is taken from the current folder
        ///  &lt;target folder&gt; specifies output folder for the compiled package; by default folder of manifest&apos;s location is used
        ///  &lt;version override&gt; is used to override the version number inside the manifest; very useful in [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Help_pack {
            get {
                return ResourceManager.GetString("Help_pack", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to syntax: {0} publish [-p:&lt;package&gt;] [-r:&lt;repository name&gt;]
        ///
        ///Publishes packages to repositories. By default all the packages in the current folders are published. Use optional parameters to override this behavior.
        ///  &lt;package&gt; specificies a package to publish; by default all packages in the current folder are published
        ///  &lt;repository name&gt; specifies repository to publish to; by default packages are published to repositories specified in the local configuration file; &lt;repository name&gt; is a &quot;name&quot; attribute o [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Help_publish {
            get {
                return ResourceManager.GetString("Help_publish", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to syntax: {0} resolve [-m:&lt;manifest location&gt;] [-d:&lt;depth&gt;] [-c:&lt;configuration name&gt;] [-f]
        ///
        ///Resolves manifest version dependencies, checking for conflicts, downloading missing libraries and installing them into the solution.
        ///  &lt;manifest location&gt; is a name or path to manifest file; by default manifest is taken from the current folder
        ///  &lt;depth&gt; is a repository search depth; by default all the repositories are searched, however this can be overriden; set depth &quot;local&quot; to search only the local repository or  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Help_resolve {
            get {
                return ResourceManager.GetString("Help_resolve", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to syntax: {0} search &lt;-t:text&gt; [&lt;-d:depth&gt;]
        ///
        ///  &lt;text&gt; is mandatory package name or name part (case insensitive&gt;
        ///  &lt;depth&gt; is a repository search depth; by default all the repositories are searched, however this can be overriden; set depth &quot;local&quot; to search only the local repository or to a number which specifies how many repositories specified in the local configuration file to search
        ///
        ///examples:
        ///  {0} search -t:log4net
        ///  {0} search -t:log4net -d:local.
        /// </summary>
        internal static string Help_search {
            get {
                return ResourceManager.GetString("Help_search", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to syntax: {0} template
        ///
        ///Has no extra parameters. Creates template manifest file with fake data..
        /// </summary>
        internal static string Help_template {
            get {
                return ResourceManager.GetString("Help_template", resourceCulture);
            }
        }
    }
}
